# ============================================================================ #
#        ANSI color codes                                                      #
# ============================================================================ #

GREEN := \033[0;32m
YELLOW := \033[0;33m
BOLD_GREEN := \033[1;32m
BOLD_YELLOW := \033[1;33m
RESET := \033[0m
CLEAR_LINE := \033[K

# ============================================================================ #
#        Config variables                                                      #
# ============================================================================ #

NAME := push_swap
TEST_BIN := test_bin

# Répertoires
SRC_DIR := src
INC_DIR := include
OBJ_DIR := obj
TEST_DIR := tests

# Répertoire de la bibliothèque
LIB_DIR := lib/str

# Compilateur et flags
CC := cc
CFLAGS := -Wall -Werror -Wextra -I$(INC_DIR) -g

# Sources principales
SRC := $(wildcard $(SRC_DIR)/*.c)
OBJ := $(patsubst $(SRC_DIR)/%.c, $(OBJ_DIR)/%.o, $(SRC)) $(LIB_OBJ)

# Sources de la bibliothèque
LIB_SRC := $(wildcard $(LIB_DIR)/*.c)
LIB_OBJ := $(patsubst $(LIB_DIR)/%.c, $(OBJ_DIR)/lib/str/%.o, $(LIB_SRC))

# Objets principaux (incluant les objets de la bibliothèque)
OBJ := $(patsubst $(SRC_DIR)/%.c, $(OBJ_DIR)/%.o, $(SRC)) $(LIB_OBJ)

# Sources et objets de test
TEST_SRC := $(wildcard $(TEST_DIR)/*.c)
TEST_OBJ := $(patsubst $(TEST_DIR)/%.c, $(OBJ_DIR)/tests/%.o, $(TEST_SRC))

# Objets pour le binaire de test (excluant main.o et incluant les objets de la bibliothèque)
TEST_LINK_OBJ := $(filter-out $(OBJ_DIR)/main.o, $(OBJ)) $(TEST_OBJ)

# Flags additionnels
LDFLAGS :=
VALGRIND_FLAGS := --leak-check=full --show-leak-kinds=all
LLDB_FLAGS := 

# Arguments pour l'exécution
TEST_ARGUMENTS := "-6752 -8769 -5444 2851 914 -2643 9718 -4658 -1151 7435 -5117 1638 -8886 -2911 9822 -9127 9764 5064 9497 1787 7500 3579 7370 -4798 -3445 3339 3680 -1611 -4665 -7483 8205 5437 -7848 -2599 489 8256 1521 4137 -8987 -890 -4338 8700 5452 2567 9601 -1103 8681 -3367 -8193 -8178 -2903 -974 1997 -3051 5540 1341 -987 7280 5405 -3570 2648 8126 -8145 -2156 6117 494 -1620 2673 8978 2764 7321 5103 -1709 -3664 9983 -64 9309 6306 5691 -9990 -1198 -3382 -2424 1008 -11 -5511 7433 -289 -4361 8614 -8495 222 -9944 7484 -3538 7112 6430 -3439 9912 6179 9186 8728 -3155 -2159 -6766 -4659 -8714 4779 2147 -8423 -5417 8129 6001 -5736 -3100 -8021 6691 -9770 6855 8010 -1227 -5374 -6090 4164 -4373 -7978 8155 9065 6557 -3090 -6357 9164 8180 8287 -4210 -5720 -4550 3026 9057 7771 -8530 5395 -9991 5767 -3662 -4087 3748 -1591 -9526 -5766 3310 6067 2406 -183 -7474 -8053 -986 6662 9412 184 756 5045 3199 3558 4295 -3575 -3451 2177 8431 6294 -7670 9421 8642 -2874 -3744 -7255 -3458 6592 -1459 8154 2559 5135 4140 4545 7071 4807 7515 8148 -6518 -8328 5307 3325 -720 -5926 -2314 3348 7584 295 3270 4027 275 -1183 3237 -9502 -33 353 -7263 6591 -6648 4788 5316 4524 946 -3264 -6613 4246 -9911 -1547 1852 -198 -4918 6399 1875 -2898 -8902 -7442 1940 -7626 1060 9505 -4102 4127 -1298 -1590 -3447 3401 -5633 -1326 -6187 6623 1974 6291 -6590 -2546 -7876 -6488 -2383 7934 -1179 9689 204 -705 -9330 560 2222 4036 2167 5869 4894 9711 4969 1876 -6020 4065 7552 6392 -9762 6677 1566 2749 4803 -1823 8489 -7997 -1738 -6561 5928 7850 4205 -4968 -9967 -3038 1570 -5029 6785 -7638 1921 6607 -2318 5205 5878 -2058 -1521 -1757 -1646 -9986 6296 -8469 343 -9980 -8657 -2968 5797 -6146 -5456 8365 9683 3605 -5502 8349 -6907 2613 8098 9935 -4565 -1696 -296 -1473 -3000 -5508 7951 -630 -6209 1265 -7718 -3022 6417 -494 -8569 1111 -661 -5657 226 5551 -6553 3761 -4007 -9884 -507 9390 1685 -417 2605 6272 3850 3817 2108 -911 9300 8170 537 4795 -880 7638 4348 -4812 7710 9790 2469 3535 -6506 -1967 -9304 3600 5450 6041 -5293 -5276 985 9918 4426 -6626 -9158 -3670 432 -9042 -624 -6978 9658 -5463 -4888 -4569 -1771 -3724 -6061 2847 -6829 -5708 -3146 6966 -2536 -1102 4533 -8715 -2014 7478 -6948 2219 2358 -2965 -8175 -8058 333 -8690 -2985 -2396 -2882 -8916 -757 2074 -8208 5900 1402 -9290 4519 3907 3920 -3607 3846 5113 -2706 -6082 -9548 -2364 -1837 -5311 2326 -5414 -4492 4907 3818 -432 -4923 -5695 8441 7914 5283 -2083 5219 9797 -2208 -6645 -2425 7882 -736 2701 5862 6382 -4536 1541 -2614 7000 4922 1108 -5210 -2456 7901 -3631 -2963 -5097 -7195 4591 2957 2102 1577 4281 -8363 948 2741 -8998 9210 5400 4078 4697 7349 9800 -1171 7346 3696 9103 -715 -1180 9486 4386 -451 -3402 -8942 -2841 3356 5595 1094 7237 -4736 7645 7049 730 7889 6020 8023 2206"
MAIN_ARGUMENTS := "-6752 -8769 -5444 2851 914 -2643 9718 -4658 -1151 7435 -5117 1638 -8886 -2911 9822 -9127 9764 5064 9497 1787 7500 3579 7370 -4798 -3445 3339 3680 -1611 -4665 -7483 8205 5437 -7848 -2599 489 8256 1521 4137 -8987 -890 -4338 8700 5452 2567 9601 -1103 8681 -3367 -8193 -8178 -2903 -974 1997 -3051 5540 1341 -987 7280 5405 -3570 2648 8126 -8145 -2156 6117 494 -1620 2673 8978 2764 7321 5103 -1709 -3664 9983 -64 9309 6306 5691 -9990 -1198 -3382 -2424 1008 -11 -5511 7433 -289 -4361 8614 -8495 222 -9944 7484 -3538 7112 6430 -3439 9912 6179 9186 8728 -3155 -2159 -6766 -4659 -8714 4779 2147 -8423 -5417 8129 6001 -5736 -3100 -8021 6691 -9770 6855 8010 -1227 -5374 -6090 4164 -4373 -7978 8155 9065 6557 -3090 -6357 9164 8180 8287 -4210 -5720 -4550 3026 9057 7771 -8530 5395 -9991 5767 -3662 -4087 3748 -1591 -9526 -5766 3310 6067 2406 -183 -7474 -8053 -986 6662 9412 184 756 5045 3199 3558 4295 -3575 -3451 2177 8431 6294 -7670 9421 8642 -2874 -3744 -7255 -3458 6592 -1459 8154 2559 5135 4140 4545 7071 4807 7515 8148 -6518 -8328 5307 3325 -720 -5926 -2314 3348 7584 295 3270 4027 275 -1183 3237 -9502 -33 353 -7263 6591 -6648 4788 5316 4524 946 -3264 -6613 4246 -9911 -1547 1852 -198 -4918 6399 1875 -2898 -8902 -7442 1940 -7626 1060 9505 -4102 4127 -1298 -1590 -3447 3401 -5633 -1326 -6187 6623 1974 6291 -6590 -2546 -7876 -6488 -2383 7934 -1179 9689 204 -705 -9330 560 2222 4036 2167 5869 4894 9711 4969 1876 -6020 4065 7552 6392 -9762 6677 1566 2749 4803 -1823 8489 -7997 -1738 -6561 5928 7850 4205 -4968 -9967 -3038 1570 -5029 6785 -7638 1921 6607 -2318 5205 5878 -2058 -1521 -1757 -1646 -9986 6296 -8469 343 -9980 -8657 -2968 5797 -6146 -5456 8365 9683 3605 -5502 8349 -6907 2613 8098 9935 -4565 -1696 -296 -1473 -3000 -5508 7951 -630 -6209 1265 -7718 -3022 6417 -494 -8569 1111 -661 -5657 226 5551 -6553 3761 -4007 -9884 -507 9390 1685 -417 2605 6272 3850 3817 2108 -911 9300 8170 537 4795 -880 7638 4348 -4812 7710 9790 2469 3535 -6506 -1967 -9304 3600 5450 6041 -5293 -5276 985 9918 4426 -6626 -9158 -3670 432 -9042 -624 -6978 9658 -5463 -4888 -4569 -1771 -3724 -6061 2847 -6829 -5708 -3146 6966 -2536 -1102 4533 -8715 -2014 7478 -6948 2219 2358 -2965 -8175 -8058 333 -8690 -2985 -2396 -2882 -8916 -757 2074 -8208 5900 1402 -9290 4519 3907 3920 -3607 3846 5113 -2706 -6082 -9548 -2364 -1837 -5311 2326 -5414 -4492 4907 3818 -432 -4923 -5695 8441 7914 5283 -2083 5219 9797 -2208 -6645 -2425 7882 -736 2701 5862 6382 -4536 1541 -2614 7000 4922 1108 -5210 -2456 7901 -3631 -2963 -5097 -7195 4591 2957 2102 1577 4281 -8363 948 2741 -8998 9210 5400 4078 4697 7349 9800 -1171 7346 3696 9103 -715 -1180 9486 4386 -451 -3402 -8942 -2841 3356 5595 1094 7237 -4736 7645 7049 730 7889 6020 8023 2206"

# ============================================================================ #
#        Règles de compilation                                                 #
# ============================================================================ #

all: $(NAME)

$(NAME): $(OBJ) msg_comp
	@$(CC) $(CFLAGS) -o $@ $(OBJ) $(LDFLAGS)
	@printf "$(GREEN)✔ $(NAME) créé.\n$(RESET)"

# Règle de compilation pour les objets principaux
$(OBJ_DIR)/%.o: $(SRC_DIR)/%.c
	@mkdir -p $(dir $@)
	@$(CC) $(CFLAGS) -c $< -o $@

# Règle de compilation pour les objets de la bibliothèque
$(OBJ_DIR)/lib/str/%.o: $(LIB_DIR)/%.c
	@mkdir -p $(dir $@)
	@$(CC) $(CFLAGS) -c $< -o $@

# Cible pour recompiler complètement
re: fclean all

# ============================================================================ #
#        Règles de nettoyage                                                   #
# ============================================================================ #

clean: msg_clean
	@rm -rf $(OBJ_DIR)

fclean: clean msg_fclean
	@rm -f $(NAME) $(TEST_BIN)

# ============================================================================ #
#        Règles de test                                                        #
# ============================================================================ #

# Construction du binaire de test
$(TEST_BIN): $(TEST_LINK_OBJ)
	@$(CC) $(CFLAGS) -o $@ $(TEST_LINK_OBJ) $(LDFLAGS)
	@printf "$(GREEN)✔ Binaire de test $(TEST_BIN) créé.\n$(RESET)"

# Règle de compilation pour les objets de test
$(OBJ_DIR)/tests/%.o: $(TEST_DIR)/%.c
	@mkdir -p $(dir $@)
	@$(CC) $(CFLAGS) -c $< -o $@

# Pour lancer les tests
test: $(TEST_BIN)
	@printf "$(YELLOW)Lancement des tests...\n$(RESET)"
	@./$(TEST_BIN) $(TEST_ARGUMENTS)

# Tests avec Valgrind
test_valgrind: $(TEST_BIN)
	@printf "$(YELLOW)Lancement des tests avec Valgrind...\n$(RESET)"
	valgrind $(VALGRIND_FLAGS) ./$(TEST_BIN) $(TEST_ARGUMENTS)

# Tests avec LLDB
test_lldb: $(TEST_BIN)
	@printf "$(YELLOW)Lancement des tests avec LLDB...\n$(RESET)"
	lldb $(LLDB_FLAGS) ./$(TEST_BIN) $(TEST_ARGUMENTS)

# ============================================================================ #
#        Règles pour le programme principal                                      #
# ============================================================================ #

# Exécuter le programme principal
run: $(NAME)
	@printf "$(YELLOW)Lancement de $(NAME)...\n$(RESET)"
	@./$(NAME) $(MAIN_ARGUMENTS)

# Exécuter le programme principal avec Valgrind
main_valgrind: $(NAME)
	@printf "$(YELLOW)Lancement de $(NAME) avec Valgrind...\n$(RESET)"
	valgrind $(VALGRIND_FLAGS) ./$(NAME) $(MAIN_ARGUMENTS)

# Exécuter le programme principal avec LLDB
main_lldb: $(NAME)
	@printf "$(YELLOW)Lancement de $(NAME) avec LLDB...\n$(RESET)"
	lldb $(LLDB_FLAGS) ./$(NAME) -- $(MAIN_ARGUMENTS)

# ============================================================================ #
#        Messages                                                              #
# ============================================================================ #

msg_comp:
	@printf "$(YELLOW)Compilation de $(NAME)... [$(CFLAGS)]\n$(RESET)"

msg_clean:
	@printf "$(YELLOW)Suppression des fichiers objets...\n$(RESET)"

msg_fclean:
	@printf "$(YELLOW)Suppression de $(NAME) et des tests...\n$(RESET)"

# ============================================================================ #
#        Cibles phony                                                          #
# ============================================================================ #

.PHONY: all clean fclean re test test_valgrind test_lldb run main_valgrind main_lldb msg_comp msg_clean msg_fclean
